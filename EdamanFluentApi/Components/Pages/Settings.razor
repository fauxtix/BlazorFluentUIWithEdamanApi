@page "/settings"
<h3>Settings</h3>

@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens
@inject BaseLayerLuminance BaseLayerLuminance
@inject AccentBaseColor AccentBaseColor

<div class="w-100">
    <FluentDesignTheme @bind-Mode="@Mode"
                       @bind-OfficeColor="@OfficeColor"
                       OnLoaded="@OnLoaded"
                       OnLuminanceChanged="@OnLuminanceChanged"
                       StorageName="theme" />

    <div style="min-height: 250px;">
        <FluentGrid>
            <FluentGridItem>
                <FluentSelect Label="Theme"
                              Width="250px"
                              Items="@(Enum.GetValues<DesignThemeModes>())"
                              @bind-SelectedOption="@Mode" />
            </FluentGridItem>

            <FluentGridItem>
                <FluentSelect Label="Color"
                              Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
                              Height="200px"
                              Width="250px"
                              @bind-SelectedOption="@OfficeColor">
                    <OptionTemplate>
                        <FluentStack>
                            <FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())"
                                        Color="Color.Custom"
                                        CustomColor="#036ac4" />
                            <FluentLabel>@context</FluentLabel>
                        </FluentStack>
                    </OptionTemplate>
                </FluentSelect>
                <FluentButton Appearance="Appearance.Accent" OnClick="PickRandomColor">Feeling lucky?</FluentButton>
            </FluentGridItem>
        </FluentGrid>
    </div>
</div>

@code {
    public DesignThemeModes Mode { get; set; }
    public OfficeColor? OfficeColor { get; set; }

    void OnLoaded(LoadedEventArgs e)
    {
        Console.WriteLine($"Loaded: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    void OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        Console.WriteLine($"Changed: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    void PickRandomColor()
    {
        OfficeColor = OfficeColorUtilities.GetRandom();
    }
}
