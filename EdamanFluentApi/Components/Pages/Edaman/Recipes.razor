@page "/recipes"

@rendermode InteractiveServer

<PageTitle>Edaman Api Recipes</PageTitle>
@if (recipes is null)
{
    <Spinner IsVisible="true" />
}
else
{
    <div class="container-fluid">
        <FluentHeader Class="d-flex justify-content-center align-items-center fs-3 fw-bolder mb-2" Style="background-color:transparent; color:white">Recipes</FluentHeader>
        <div class="card-box" />
        <div class="fluent-container">
            <FluentNumberField @bind-Value=maxTries Label ="Results per page"
                               Appearance="FluentInputAppearance.Outline" MaxLength="2" MinLength="1" Size="10"
                               Min="0" Max="@configMaxTries.ToString()" Step="5"
                               Disabled="@selectedSavedSearch"/>
            <FluentCombobox Items="@jsonFiles" @onchange=@((x) => OnSavedSearchesSelected(x))
                            Appearance="Appearance.Outline"
                            Placeholder="Saved searches"
                            @bind-Value="@SearchValue"/>
            <FluentCombobox Items="@cuisineTypes"
                            Appearance="Appearance.Outline"
                            Placeholder="Cuisine type"
                            Disabled="@selectedSavedSearch"
                            @bind-Value="@selectedCuisineType"/>
            <FluentSearch @ref=searchQuery
                          @bind-Value="SearchValue"
                          @bind-Value:after="HandleClear" Placeholder="Keyword(s)"
                          @oninput="@(e => SearchValue = e.Value?.ToString())"
                          Disabled="@selectedSavedSearch"
                          Appearance="FluentInputAppearance.Outline" Spellcheck=false />
        </div>
        <div class="d-flex justify-content-end align-items-center gap-2 my-3">
            <FluentButton IconStart="@(new Icons.Regular.Size16.Search())" Appearance="Appearance.Accent" Style="border-radius:11px;"
                          @onclick="OnSearch">
                Search
            </FluentButton>
            <FluentButton IconStart="@(new Icons.Regular.Size16.ReadingList())" Appearance="Appearance.Outline" Style="border-radius:11px;"
                          @onclick="RefreshPage">
                Clear/Refresh
            </FluentButton>
        </div>

        <div hidden="@(!isLoading)">
            <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
                <Spinner IsVisible="@isLoading" />
            </div>
        </div>
        <hr />
        <FluentBodyContent>
            <div class="card-container mt-2">
                @{
                    int index = 0;

                    foreach (var recipe in recipes)
                    {
                        <FluentCard Data="@recipe" class="fluent-card" Width="100%" Height="auto">
                            <ChildContent>
                                <div style="font-weight:bold; font-size:large;">@recipe.Label</div>
                                <hr />
                                <div class="recipe-content">
                                    <div class="recipe-image">
                                        <img src="@recipe.Image" class="img-fluid" alt="Recipe Image" />
                                        <div class="mt-1 mb-2">
                                            <div class="d-flex justify-content-start align-items-center gap-1 mb-1">
                                                <div class="col-lg-4"><small>Servings</small></div>
                                                <FluentBadge Appearance="Appearance.Neutral"><b>@recipe.Yield</b></FluentBadge>
                                            </div>

                                            @if (recipe.Cautions.Length > 0)
                                            {
                                                <div class="row">
                                                    <div class="col-lg-4"><small><b>Cautions</b></small></div>
                                                    <div class="d-flex gap-1 col-lg-8" style="flex-wrap:wrap">
                                                        @foreach (var cautionMsg in recipe.Cautions)
                                                        {
                                                            <FluentBadge Appearance="Appearance.Neutral" Fill="highlight" BackgroundColor="red" Color="white">@cautionMsg</FluentBadge>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                            <div class="row my-1">
                                                <div class="col-lg-4"><small>Source</small></div>
                                                <div class="col-lg-8">
                                                    <FluentBadge Appearance="Appearance.Neutral" Fill="highlight" BackgroundColor="#ffd800;" Color="#000">@recipe.Source</FluentBadge>
                                                </div>
                                            </div>

                                            @if (recipe.TotalTime > 0)
                                            {
                                                <div class="row my-1">
                                                    <div class="col-lg-4"><small>Cook</small></div>
                                                    <div class="col-lg-8">
                                                        <FluentBadge Appearance="Appearance.Neutral" Fill="lowlight" BackgroundColor="#000;" Color="#fff">@recipe.TotalTime</FluentBadge>
                                                        <span> min.</span>
                                                    </div>
                                                </div>
                                            }
                                            <div class="row my-1">
                                                <div class="col-lg-4">
                                                    @if (@recipe.Calories <= 2000)
                                                    {
                                                        <small>Calories</small>
                                                    }
                                                    else
                                                    {
                                                        <small><b>Calories</b></small>
                                                    }
                                                </div>
                                                <div class="col-lg-8">
                                                    @if (@recipe.Calories <= 2000)
                                                    {
                                                        <FluentBadge Appearance="Appearance.Neutral" Fill="highlight" BackgroundColor="green" Color="white">@recipe.Calories.ToString("#,##0.00")</FluentBadge>
                                                    }
                                                    else
                                                    {
                                                        <FluentBadge Appearance="Appearance.Neutral" Fill="highlight" BackgroundColor="red" Color="white">@recipe.Calories.ToString("#,##0.00")</FluentBadge>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                        <div class="preparation-link mt-2 text-center">
                                            <hr />
                                            <a class="btn btn-outline-success" style="border-radius:11px" href="@recipe.Url.AbsoluteUri" target="_blank">Preparation</a>
                                        </div>
                                    </div>
                                    <div class="recipe-details mx-1 mt-0">
                                        <div style="font-weight:bold; font-size:small;">
                                            <h6><em>Ingredients</em></h6>
                                        </div>
                                        <div class="ingredient-list">
                                            <ul class="list-group list-group-flush">
                                                @foreach (string ingredient in recipe.IngredientLines)
                                                {
                                                    <li class="list-group-item">@ingredient</li>
                                                }
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </ChildContent>
                        </FluentCard>

                        if ((index + 1) % 6 == 0 && index != 0 && index != recipes.Count - 1)
                        {
                            <p class="col-lg-12 mt-2 d-flex justify-content-center">
                                <FluentButton IconStart="@(new Icons.Regular.Size24.ArrowCircleUp())"
                                              Appearance="Appearance.Accent"
                                              BackgroundColor="steelblue"
                                              Color="white"
                                              Style="border-radius:18px;"
                                              @onclick="ScrollTop">
                                    Go Top
                                </FluentButton>
                            </p>
                        }
                        index++;

                    }
                }
            </div>
        </FluentBodyContent>
    </div>
}

                                              <style>
    .fluent-container {
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: row;
        gap: 10px;
    }

    /* Mobile devices */
    @@media (min-width:320px) and (max-width:480px) {
        .fluent-container {
            flex-wrap: wrap;
            gap: 15px;
        }
    }

    /*  iPads, Tablets */
    @@media (min-width:481px) and (max-width:768px) {
        .fluent-container {
            flex-wrap: wrap;
            gap: 15px;
        }
    }
    /* Small screens, laptops */
    @@media (min-width:769px) and (max-width:1024px) {
        .fluent-container {
            flex-wrap: wrap;
            gap: 15px;
        }
    }
    /* Desktops, large screens */
    @@media (min-width:1025px ) and (max-width:1200px) {
        .fluent-container {
            flex-direction: row;
            gap: 10px;
        }
    }

    /*  Extra large screens, TV */
    /*@@media (min-width:1201px) {
                .fluent-container {
                    gap: 15px;
                }
            }*/



    .card-box {
        height: 200px;
        width: 100%;
        margin-bottom: 32px;
        background-image: url('/images/recipesimage.jpg');
        background-size: cover;
        background-position: center;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    /* Define the layout for the card container */
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .fluent-card {
        flex: 1 1 auto; /* Let flexbox handle the sizing */
        border: thick solid  #32a1ce;
        max-width: calc(33.33% - 10px); /* 3 cards per row on large screens */
        min-width: 300px; /* Set a minimum width for the card */
    }

    .border-card {
        
    }

    /* Adjust the styles for medium screens */
    @@media (max-width: 1199.98px) {
        .fluent-card {
            flex-basis: calc(50% - 10px); /* 2 cards per row on medium screens */
            max-width: calc(50% - 10px); /* 2 cards per row on medium screens */
        }
    }

    /* Adjust the styles for small screens */
    @@media (max-width: 767px) {
        .fluent-card {
            flex-basis: calc(100% - 10px); /* 1 card per row on small screens */
            max-width: calc(100% - 10px); /* 1 card per row on small screens */
        }
    }

    /* Adjust the styles for when there's only one card to display on medium screens */
    @@media (max-width: 1199.98px) {
        .card-container > .fluent-card:nth-child(2):only-child {
            flex-basis: calc(100% - 10px); /* 1 card per row */
            max-width: calc(100% - 10px); /* 1 card per row */
        }
    }

    .recipe-image {
        flex: 0 0 40%; /* Set the width of the image to 30% */
        align-self: flex-start; /* Align the image to the start of its container (top) */
    }

        .recipe-image img {
            width: 100%;
            height: auto;
            border: 2px solid #ffffff; /* Add a border */
            border-radius: 10px; /* Add rounded corners */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
            transition: transform 0.3s ease, box-shadow 0.3s ease; /* Add smooth transitions */
        }

            .recipe-image img:hover {
                transform: translateY(-2px) rotate(-2deg) scale(1.05); /* Apply a slight lift, tilt left, and scale increase on hover */
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Enhance the shadow on hover */
            }

                .recipe-image img:hover:hover {
                    transform: translateY(-2px) rotate(2deg) scale(1.05); /* Tilt right on second hover */
                }

    /* Adjust the layout for recipe content */
    .recipe-content {
        display: flex; /* Use flexbox for layout */
        flex-direction: row; /* Arrange items horizontally */
        align-items: center;
        gap: 10px; /* Add space between items */
        width: 100%; /* Ensure content fills the available space */
    }

    /* Adjust the layout for recipe details */
    .recipe-details {
        flex: 1 1 auto; /* Allow details to flexibly grow */
        align-self: flex-start;
    }

    .ingredient-list {
        max-height: 300px; /* Set the maximum height for the ingredient list */
        overflow-y: auto; /* Add a vertical scrollbar when content overflows */
    }


    .message {
        text-align: center;
        color: white; /* Adjust text color for better visibility */
    }

</style>