@page "/fooddatabase"
@using EdamanFluentApi.Model.FoodDatabase
@using EdamanFluentApi.Services.Interfaces
@inject IFoodDatabaseService FoodDatabaseService

@rendermode InteractiveServer
<PageTitle>Edaman Food Database</PageTitle>

@if (foodData is null)
{
    <Spinner IsVisible="true" />
}
else
{
    <div class="card-box"/>

    <FluentHeader>
        <ChildContent>
            <div class="d-flex gap-2">
                <FluentSearch @ref=searchQuery
                              @bind-Value="SearchValue"
                              @bind-Value:after="HandleClear"
                              @oninput="@(e => SearchValue = e.Value?.ToString())"
                              Size="60" Appearance="FluentInputAppearance.Outline" Spellcheck=false
                              Placeholder="Search food database" />
                <FluentButton IconStart="@(new Icons.Regular.Size16.Search())" Appearance="Appearance.Accent" BackgroundColor="green" Color="white" Style="border-radius:22px;"
                              @onclick="OnSearch">
                    Search
                </FluentButton>
            </div>

            <div hidden="@(!isLoading)">
                <div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
                    <Spinner IsVisible="@isLoading" />
                </div>
            </div>
        </ChildContent>
    </FluentHeader>
    <hr />
    <FluentBodyContent>
        <div class="card-container mt-2">
            @{
                int index = 0;
                foreach (var foodItem in foodData)
                {
                    <FluentCard Data="@foodItem" class="fluent-card" Width="100%" Height="auto">
                        <ChildContent>
                            <div style="font-weight:bold; font-size:large;">@foodItem.Label</div>
                            <hr />
                            <div class="recipe-content">
                                <div class="recipe-image">
                                    @if (foodItem.Image is not null)
                                    {
                                        <img src="@foodItem.Image" class="img-fluid" alt="Recipe Image" />
                                    }
                                    else
                                    {
                                        <img src="images/No_Image_Available.jpg" class="img-fluid" alt="Recipe Image" />
                                    }

                                </div>
                                <div class="recipe-details">
                                    <div class="card" style="font-weight:bold; font-size:large;">
                                        <h5>Category</h5>
                                    </div>
                                    <div class="ingredient-list">
                                        <ul class="list-group list-group-flush">
                                            <li class="list-group-item">@foodItem.Category</li>
                                        </ul>
                                    </div>

                                    <div class="card" style="font-weight:bold; font-size:large;">
                                        <h5>Nutrients</h5>
                                    </div>
                                    <div class="ingredient-list">
                                        <ul class="list-group list-group-flush">
                                            <li class="list-group-item"><b>Energy</b>: @foodItem.Nutrients.Energy.ToString("0.00")</li>
                                            <li class="list-group-item"><b>Protein</b>: @foodItem.Nutrients.Protein.ToString("0.00")</li>
                                            <li class="list-group-item"><b>Fat</b>: @foodItem.Nutrients.Fat.ToString("0.00")</li>
                                            <li class="list-group-item"><b>Carbohydrates</b>: @foodItem.Nutrients.Carbohydrates.ToString("0.00")</li>
                                            <li class="list-group-item"><b>Fiber</b>: @foodItem.Nutrients.Fiber.ToString("0.00")</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </ChildContent>
                    </FluentCard>
                    if ((index + 1) % 6 == 0 && index != 0 && index != foodData.Count - 1)
                    {
                        <p class="col-lg-12 mt-2 d-flex justify-content-center">
                            <FluentButton IconStart="@(new Icons.Regular.Size24.ArrowCircleUp())"
                                          Appearance="Appearance.Accent"
                                          BackgroundColor="steelblue"
                                          Color="white"
                                          Style="border-radius:18px;"
                                          @onclick="ScrollTop">
                                Go Top
                            </FluentButton>
                        </p>
                    }
                    index++;


                }
            }
        </div>
    </FluentBodyContent>
}

<style>
    /* Define the layout for the card container */
    .card-container {
        display: flex;
        flex-wrap: wrap;
        gap: 10px;
    }

    .fluent-card {
        flex: 1 1 auto; /* Let flexbox handle the sizing */
        max-width: calc(33.33% - 10px); /* 3 cards per row on large screens */
        min-width: 300px; /* Set a minimum width for the card */
    }
    /* Adjust the styles for medium screens */
    @@media (max-width: 1199.98px) {
        .fluent-card {
            flex-basis: calc(50% - 10px); /* 2 cards per row on medium screens */
            max-width: calc(50% - 10px); /* 2 cards per row on medium screens */
        }
    }

    /* Adjust the styles for small screens */
    @@media (max-width: 767px) {
        .fluent-card {
            flex-basis: calc(100% - 10px); /* 1 card per row on small screens */
            max-width: calc(100% - 10px); /* 1 card per row on small screens */
        }
    }

    /* Adjust the styles for when there's only one card to display on medium screens */
    @@media (max-width: 1199.98px) {
        .card-container > .fluent-card:nth-child(2):only-child {
            flex-basis: calc(100% - 10px); /* 1 card per row */
            max-width: calc(100% - 10px); /* 1 card per row */
        }
    }

    .recipe-image {
        flex: 0 0 40%; /* Set the width of the image to 30% */
        align-self: flex-start; /* Align the image to the start of its container (top) */
    }

        .recipe-image img {
            width: 100%;
            height: auto;
            border: 2px solid #ffffff; /* Add a border */
            border-radius: 10px; /* Add rounded corners */
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
            transition: transform 0.3s ease, box-shadow 0.3s ease; /* Add smooth transitions */
        }

            .recipe-image img:hover {
                transform: translateY(-2px) rotate(-2deg) scale(1.05); /* Apply a slight lift, tilt left, and scale increase on hover */
                box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2); /* Enhance the shadow on hover */
            }

                .recipe-image img:hover:hover {
                    transform: translateY(-2px) rotate(2deg) scale(1.05); /* Tilt right on second hover */
                }

    /* Adjust the layout for recipe content */
    .recipe-content {
        display: flex; /* Use flexbox for layout */
        flex-direction: row; /* Arrange items horizontally */
        align-items: center;
        gap: 10px; /* Add space between items */
        width: 100%; /* Ensure content fills the available space */
    }

    /* Adjust the layout for recipe details */
    .recipe-details {
        flex: 1 1 auto; /* Allow details to flexibly grow */
        align-self: flex-start;
    }

    .ingredient-list {
        max-height: 300px; /* Set the maximum height for the ingredient list */
        overflow-y: auto; /* Add a vertical scrollbar when content overflows */
    }

    .card-box {
        height: 200px;
        width: 100%;
        margin-bottom: 32px;
        background-image: url('/images/foodimage.jpg');
        background-size: cover;
        background-position: center;
        border-radius: 10px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .message {
        text-align: center;
        color: white; /* Adjust text color for better visibility */
    }
</style>

